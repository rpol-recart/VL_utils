# üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º

```python
import numpy as np
from collections import deque
from scipy.optimize import linear_sum_assignment
from dataclasses import dataclass
from typing import Tuple, List, Optional
from enum import Enum

class TrackState(Enum):
    TENTATIVE = "tentative"
    CONFIRMED = "confirmed"
    APPROACHING = "approaching"
    DEPARTING = "departing"
    STATIONARY = "stationary"
    OCCLUDED = "occluded"
    OUT_OF_FRAME = "out_of_frame"


@dataclass
class TrackConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞"""
    history_len: int = 40
    min_hits: int = 3
    max_misses: int = 20
    fps: float = 4.0
    
    # ‚≠ê –ù–û–í–û–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
    min_box_width: Optional[float] = None   # None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    min_box_height: Optional[float] = None
    min_box_area: Optional[float] = None    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    
    # ‚≠ê –ù–û–í–û–ï: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–¥—Ä–∞)
    min_box_width_ratio: Optional[float] = None   # –ù–∞–ø—Ä–∏–º–µ—Ä, 0.05 = 5% —à–∏—Ä–∏–Ω—ã –∫–∞–¥—Ä–∞
    min_box_height_ratio: Optional[float] = None
    
    # ‚≠ê –ù–û–í–û–ï: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
    allow_shrinking_below_threshold: bool = True  # –†–∞–∑—Ä–µ—à–∏—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
    delete_tracks_below_threshold: bool = False   # –£–¥–∞–ª—è—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
    
    # –ü–æ—Ä–æ–≥–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    max_x2_deviation: float = 0.15
    max_cy_deviation: float = 0.10
    min_width_ratio: float = 0.4
    max_width_ratio: float = 2.5
    
    # –í–µ—Å–∞ –¥–ª—è score
    weight_x2: float = 0.6
    weight_cy: float = 0.3
    weight_width: float = 0.1
    
    # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    alpha_position: float = 0.4
    alpha_velocity: float = 0.6
    
    # Kalman
    use_kalman: bool = True
    kalman_process_variance: float = 2.0
    kalman_measurement_variance: float = 8.0
    
    # –î–µ—Ç–µ–∫—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    motion_threshold_px: float = 10.0
    min_history_for_state: int = 5
    
    # –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞–¥—Ä–∞
    edge_proximity_threshold: float = 0.95
    out_of_frame_margin: float = 1.2
    
    # –û–∫–∫–ª—é–∑–∏—è
    occlusion_tolerance_multiplier: float = 0.15


class SizeValidator:
    """
    ‚≠ê –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ –±–æ–∫—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤.
    """
    def __init__(self, config: TrackConfig, frame_width: int, frame_height: int):
        self.config = config
        self.frame_width = frame_width
        self.frame_height = frame_height
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö
        self.abs_min_width = self._compute_absolute_width()
        self.abs_min_height = self._compute_absolute_height()
        self.abs_min_area = config.min_box_area
    
    def _compute_absolute_width(self) -> Optional[float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É"""
        if self.config.min_box_width is not None:
            return self.config.min_box_width
        
        if self.config.min_box_width_ratio is not None:
            return self.config.min_box_width_ratio * self.frame_width
        
        return None
    
    def _compute_absolute_height(self) -> Optional[float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É"""
        if self.config.min_box_height is not None:
            return self.config.min_box_height
        
        if self.config.min_box_height_ratio is not None:
            return self.config.min_box_height_ratio * self.frame_height
        
        return None
    
    def is_valid_for_new_track(self, box: Tuple[float, ...]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –±–æ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞.
        
        Returns:
            (is_valid, reason) - –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        """
        x1, y1, x2, y2 = box
        width = x2 - x1
        height = y2 - y1
        area = width * height
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if width <= 0 or height <= 0:
            return False, "invalid_dimensions"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        if self.abs_min_width is not None and width < self.abs_min_width:
            return False, f"width_too_small ({width:.1f} < {self.abs_min_width:.1f})"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        if self.abs_min_height is not None and height < self.abs_min_height:
            return False, f"height_too_small ({height:.1f} < {self.abs_min_height:.1f})"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏
        if self.abs_min_area is not None and area < self.abs_min_area:
            return False, f"area_too_small ({area:.1f} < {self.abs_min_area:.1f})"
        
        return True, "ok"
    
    def is_valid_for_update(self, box: Tuple[float, ...]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –±–æ–∫—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞.
        
        ‚≠ê –ú–æ–∂–µ—Ç –∏–º–µ—Ç—å –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –µ—Å–ª–∏ allow_shrinking_below_threshold=True
        """
        if self.config.allow_shrinking_below_threshold:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            x1, y1, x2, y2 = box
            if x2 > x1 and y2 > y1:
                return True, "ok"
            return False, "invalid_dimensions"
        else:
            # –¢–µ –∂–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, —á—Ç–æ –∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
            return self.is_valid_for_new_track(box)
    
    def should_delete_track(self, box: Tuple[float, ...]) -> bool:
        """
        ‚≠ê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑-–∑–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
        """
        if not self.config.delete_tracks_below_threshold:
            return False
        
        is_valid, _ = self.is_valid_for_new_track(box)
        return not is_valid
    
    def get_thresholds_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–≥–∞—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'min_width_px': self.abs_min_width,
            'min_height_px': self.abs_min_height,
            'min_area_px2': self.abs_min_area,
            'width_ratio': self.config.min_box_width_ratio,
            'height_ratio': self.config.min_box_height_ratio,
            'allow_shrinking': self.config.allow_shrinking_below_threshold,
            'delete_on_shrink': self.config.delete_tracks_below_threshold
        }


class AdaptiveKalmanFilter1D:
    """Kalman —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π measurement_variance"""
    def __init__(self, process_variance=2.0, measurement_variance=8.0):
        self.base_process_var = process_variance
        self.base_measurement_var = measurement_variance
        self.estimate = None
        self.error_estimate = 1.0
        self.missed_updates = 0
        
    def predict(self):
        if self.estimate is None:
            return None
        self.error_estimate += self.base_process_var
        self.missed_updates += 1
        return self.estimate
    
    def update(self, measurement):
        if self.estimate is None:
            self.estimate = measurement
            self.error_estimate = self.base_measurement_var
            self.missed_updates = 0
            return self.estimate
        
        adaptive_meas_var = self.base_measurement_var * (1 + 0.5 * self.missed_updates)
        error_prediction = self.error_estimate + self.base_process_var
        kalman_gain = error_prediction / (error_prediction + adaptive_meas_var)
        self.estimate = self.estimate + kalman_gain * (measurement - self.estimate)
        self.error_estimate = (1 - kalman_gain) * error_prediction
        self.missed_updates = 0
        return self.estimate


class VelocityEstimator:
    """–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–∞–¥—Ä–∞–º"""
    def __init__(self, alpha=0.6, max_history=5):
        self.alpha = alpha
        self.max_history = max_history
        self.velocity = 0.0
        self.recent_deltas = deque(maxlen=max_history)
    
    def update(self, current_value, previous_value, dt):
        if dt == 1:
            delta = current_value - previous_value
            self.recent_deltas.append(delta)
            self.velocity = self.alpha * delta + (1 - self.alpha) * self.velocity
        elif dt > 1:
            if len(self.recent_deltas) > 0:
                avg_delta = np.median(self.recent_deltas)
                self.velocity = self.alpha * avg_delta + (1 - self.alpha) * self.velocity
    
    def get_velocity(self):
        return self.velocity
    
    def predict(self, frames_ahead):
        safe_frames = min(frames_ahead, 3)
        return self.velocity * safe_frames


class ContainerTrack:
    def __init__(self, track_id: int, frame_id: int, box: Tuple[float, ...], 
                 frame_width: int, frame_height: int, config: TrackConfig,
                 size_validator: SizeValidator):  # ‚≠ê –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        self.id = track_id
        self.frame_width = frame_width
        self.frame_height = frame_height
        self.config = config
        self.size_validator = size_validator  # ‚≠ê
        
        self.history = deque(maxlen=config.history_len)
        
        self.state = TrackState.TENTATIVE
        self.missed_frames = 0
        self.hit_streak = 0
        self.age = 0
        
        # ‚≠ê –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        self.size_violation_count = 0
        
        if config.use_kalman:
            self.kf_x2 = AdaptiveKalmanFilter1D(
                config.kalman_process_variance,
                config.kalman_measurement_variance
            )
            self.kf_cy = AdaptiveKalmanFilter1D(
                config.kalman_process_variance,
                config.kalman_measurement_variance
            )
        else:
            self.kf_x2 = None
            self.kf_cy = None
        
        self.smooth_width = None
        self.smooth_height = None
        
        self.velocity_estimator_x2 = VelocityEstimator(config.alpha_velocity)
        self.velocity_estimator_cy = VelocityEstimator(config.alpha_velocity)
        
        self.add_observation(frame_id, box)
    
    def add_observation(self, frame_id: int, box: Tuple[float, ...]):
        """‚≠ê –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤"""
        x1, y1, x2, y2 = box
        
        if x2 <= x1 or y2 <= y1:
            return False
        
        # ‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        is_valid, reason = self.size_validator.is_valid_for_update(box)
        if not is_valid:
            self.size_violation_count += 1
            # –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É
            if self.config.delete_tracks_below_threshold:
                return False
        else:
            self.size_violation_count = 0  # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞
        
        width = x2 - x1
        height = y2 - y1
        cy = (y1 + y2) / 2.0
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if self.config.use_kalman and self.kf_x2 is not None:
            smooth_x2 = self.kf_x2.update(x2)
            smooth_cy = self.kf_cy.update(cy)
        else:
            if self.smooth_width is None:
                smooth_x2 = x2
                smooth_cy = cy
            else:
                last = self.history[-1]
                alpha = self.config.alpha_position
                smooth_x2 = alpha * x2 + (1 - alpha) * last['smooth_x2']
                smooth_cy = alpha * cy + (1 - alpha) * last['smooth_cy']
        
        # EMA –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
        if self.smooth_width is None:
            self.smooth_width = width
            self.smooth_height = height
        else:
            alpha = self.config.alpha_position
            self.smooth_width = alpha * width + (1 - alpha) * self.smooth_width
            self.smooth_height = alpha * height + (1 - alpha) * self.smooth_height
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if len(self.history) > 0:
            last = self.history[-1]
            dt = frame_id - last['frame']
            self.velocity_estimator_x2.update(x2, last['x2'], dt)
            self.velocity_estimator_cy.update(cy, last['cy'], dt)
        
        self.history.append({
            'frame': frame_id,
            'x2': x2,
            'cy': cy,
            'width': width,
            'height': height,
            'smooth_x2': smooth_x2,
            'smooth_cy': smooth_cy,
            'smooth_width': self.smooth_width,
            'smooth_height': self.smooth_height
        })
        
        self.hit_streak += 1
        self.missed_frames = 0
        self.age += 1
        
        return True
    
    def should_be_deleted_due_to_size(self) -> bool:
        """‚≠ê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞"""
        if not self.config.delete_tracks_below_threshold:
            return False
        
        if not self.history:
            return False
        
        last = self.history[-1]
        box = (
            last['smooth_x2'] - last['smooth_width'],
            last['smooth_cy'] - last['smooth_height'] / 2,
            last['smooth_x2'],
            last['smooth_cy'] + last['smooth_height'] / 2
        )
        
        return self.size_validator.should_delete_track(box)
    
    def predict_position(self, frames_ahead: int = 1) -> Tuple[float, float, float, float]:
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.history:
            return (0, 0, 0, 0)
        
        last = self.history[-1]
        pred_x2 = last['smooth_x2'] + self.velocity_estimator_x2.predict(frames_ahead)
        pred_cy = last['smooth_cy'] + self.velocity_estimator_cy.predict(frames_ahead)
        pred_width = last['smooth_width']
        pred_height = last['smooth_height']
        
        return (pred_x2, pred_cy, pred_width, pred_height)
    
    def is_near_edge(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –∫—Ä–∞—é –∫–∞–¥—Ä–∞"""
        if not self.history:
            return False
        
        last = self.history[-1]
        x2 = last['smooth_x2']
        threshold = self.config.edge_proximity_threshold * self.frame_width
        return x2 > threshold or x2 < (1 - self.config.edge_proximity_threshold) * self.frame_width
    
    def is_out_of_frame(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞–¥—Ä–∞"""
        pred_x2, pred_cy, pred_width, _ = self.predict_position(self.missed_frames)
        margin = self.config.out_of_frame_margin
        
        if pred_x2 < -pred_width * 0.5:
            return True
        if pred_x2 > self.frame_width * margin:
            return True
        if pred_cy < -pred_width * 0.5 or pred_cy > self.frame_height * margin:
            return True
        
        return False
    
    def get_smoothed_box(self, use_prediction: bool = False) -> Tuple[float, ...]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π –±–æ–∫—Å"""
        if not self.history:
            return (0, 0, 0, 0)
        
        if use_prediction and self.missed_frames > 0:
            x2, cy, width, height = self.predict_position(self.missed_frames)
        else:
            last = self.history[-1]
            x2 = last['smooth_x2']
            cy = last['smooth_cy']
            width = last['smooth_width']
            height = last['smooth_height']
        
        width = max(10, min(width, self.frame_width * 0.5))
        height = max(10, min(height, self.frame_height * 0.5))
        
        x1 = max(0, x2 - width)
        x2 = min(self.frame_width, x2)
        y1 = max(0, cy - height / 2)
        y2 = min(self.frame_height, cy + height / 2)
        
        return (x1, y1, x2, y2)
    
    def compatibility_score(self, new_box: Tuple[float, ...]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
        if not self.history:
            return 0.0
        
        x1, y1, x2, y2 = new_box
        width = x2 - x1
        cy = (y1 + y2) / 2.0
        
        pred_x2, pred_cy, pred_width, _ = self.predict_position(self.missed_frames + 1)
        
        occlusion_factor = 1 + self.config.occlusion_tolerance_multiplier * self.missed_frames
        adaptive_x2_dev = self.config.max_x2_deviation * occlusion_factor
        adaptive_cy_dev = self.config.max_cy_deviation * occlusion_factor
        
        norm_x2_dev = abs(x2 - pred_x2) / self.frame_width
        norm_cy_dev = abs(cy - pred_cy) / self.frame_height
        width_ratio = width / (pred_width + 1e-6)
        
        if self.is_near_edge():
            penalty_x2 = 0.0
        else:
            penalty_x2 = min(1.0, norm_x2_dev / adaptive_x2_dev)
        
        penalty_cy = min(1.0, norm_cy_dev / adaptive_cy_dev)
        
        if self.config.min_width_ratio < width_ratio < self.config.max_width_ratio:
            penalty_width = 0.0
        else:
            if width_ratio <= self.config.min_width_ratio:
                penalty_width = 1.0 - (width_ratio / self.config.min_width_ratio)
            else:
                penalty_width = (width_ratio - self.config.max_width_ratio) / self.config.max_width_ratio
            penalty_width = min(1.0, penalty_width)
        
        score = 1.0 - (
            self.config.weight_x2 * penalty_x2 +
            self.config.weight_cy * penalty_cy +
            self.config.weight_width * penalty_width
        )
        
        return max(0.0, score)
    
    def update_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        if self.missed_frames > 5 and self.is_out_of_frame():
            self.state = TrackState.OUT_OF_FRAME
            return
        
        if self.missed_frames > 0:
            self.state = TrackState.OCCLUDED
            return
        
        if len(self.history) < self.config.min_history_for_state:
            self.state = TrackState.TENTATIVE
            return
        
        if self.hit_streak < self.config.min_hits:
            self.state = TrackState.TENTATIVE
            return
        
        recent = list(self.history)[-self.config.min_history_for_state:]
        x2_values = [h['smooth_x2'] for h in recent]
        x = np.arange(len(x2_values))
        trend = np.polyfit(x, x2_values, 1)[0]
        
        threshold = self.config.motion_threshold_px
        if trend > threshold:
            self.state = TrackState.APPROACHING
        elif trend < -threshold:
            self.state = TrackState.DEPARTING
        else:
            self.state = TrackState.STATIONARY


class ContainerTracker:
    def __init__(self, frame_width: int, frame_height: int, 
                 config: Optional[TrackConfig] = None):
        self.frame_width = frame_width
        self.frame_height = frame_height
        self.config = config or TrackConfig()
        
        # ‚≠ê –°–æ–∑–¥–∞—ë–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤
        self.size_validator = SizeValidator(self.config, frame_width, frame_height)
        
        self.tracks: List[ContainerTrack] = []
        self.next_id = 1
        
        self.frame_count = 0
        self.total_detections = 0
        
        # ‚≠ê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤
        self.rejected_boxes_log = []
        self.tentative_log = []
    
    def update(self, frame_id: int, boxes: List[Tuple[float, ...]], 
               include_tentative: bool = False,
               include_occluded: bool = False) -> List[Tuple[int, Tuple, str]]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
        self.frame_count += 1
        self.total_detections += len(boxes)
        
        # ‚≠ê –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–æ–∫—Å–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É
        valid_boxes, rejected_boxes = self._validate_and_filter_boxes(boxes, frame_id)
        
        if len(valid_boxes) == 0:
            return self._handle_no_detections(frame_id, include_tentative, include_occluded)
        
        matched_tracks, unmatched_boxes = self._associate(valid_boxes)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        for track_idx, box_idx in matched_tracks:
            self.tracks[track_idx].add_observation(frame_id, valid_boxes[box_idx])
        
        # ‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –±–æ–∫—Å–æ–≤
        for box_idx in unmatched_boxes:
            new_track = ContainerTrack(
                self.next_id, frame_id, valid_boxes[box_idx],
                self.frame_width, self.frame_height, self.config,
                self.size_validator  # ‚≠ê –ü–µ—Ä–µ–¥–∞—ë–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            )
            self.tracks.append(new_track)
            self.next_id += 1
        
        self._update_all_states()
        self._prune_tracks()
        
        return self._get_output(include_tentative, include_occluded)
    
    def _validate_and_filter_boxes(self, boxes: List[Tuple[float, ...]], 
                                   frame_id: int) -> Tuple[List[Tuple[float, ...]], List[Tuple]]:
        """
        ‚≠ê –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –±–æ–∫—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É.
        
        Returns:
            (valid_boxes, rejected_boxes_with_reasons)
        """
        valid_boxes = []
        rejected_boxes = []
        
        for box in boxes:
            if len(box) != 4:
                rejected_boxes.append((box, "invalid_format"))
                continue
            
            x1, y1, x2, y2 = box
            
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not (x2 > x1 and y2 > y1 and x1 >= 0 and y1 >= 0):
                rejected_boxes.append((box, "invalid_coordinates"))
                continue
            
            # ‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
            is_valid, reason = self.size_validator.is_valid_for_new_track(box)
            
            if is_valid:
                valid_boxes.append(box)
            else:
                rejected_boxes.append((box, reason))
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤
                self.rejected_boxes_log.append({
                    'frame': frame_id,
                    'box': box,
                    'reason': reason,
                    'width': x2 - x1,
                    'height': y2 - y1
                })
        
        return valid_boxes, rejected_boxes
    
    def _associate(self, boxes: List[Tuple[float, ...]]) -> Tuple[List[Tuple[int, int]], List[int]]:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Hungarian algorithm"""
        if len(self.tracks) == 0:
            return [], list(range(len(boxes)))
        
        cost_matrix = np.zeros((len(boxes), len(self.tracks)))
        
        for i, box in enumerate(boxes):
            for j, track in enumerate(self.tracks):
                score = track.compatibility_score(box)
                cost_matrix[i, j] = 1.0 - score
        
        box_indices, track_indices = linear_sum_assignment(cost_matrix)
        
        matched_pairs = []
        matched_box_set = set()
        
        for box_idx, track_idx in zip(box_indices, track_indices):
            cost = cost_matrix[box_idx, track_idx]
            if cost < 0.75:
                matched_pairs.append((track_idx, box_idx))
                matched_box_set.add(box_idx)
        
        unmatched_boxes = [i for i in range(len(boxes)) if i not in matched_box_set]
        
        return matched_pairs, unmatched_boxes
    
    def _handle_no_detections(self, frame_id: int, 
                             include_tentative: bool,
                             include_occluded: bool) -> List[Tuple[int, Tuple, str]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –±–µ–∑ –¥–µ—Ç–µ–∫—Ü–∏–π"""
        for track in self.tracks:
            track.missed_frames += 1
            
            if self.config.use_kalman and track.kf_x2 is not None:
                track.kf_x2.predict()
                track.kf_cy.predict()
            
            track.update_state()
        
        self._prune_tracks()
        return self._get_output(include_tentative, include_occluded)
    
    def _update_all_states(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤"""
        for track in self.tracks:
            track.update_state()
    
    def _prune_tracks(self):
        """‚≠ê –û—á–∏—Å—Ç–∫–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤"""
        active_tracks = []
        
        for track in self.tracks:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º
            if track.missed_frames > self.config.max_misses:
                continue
            if track.state == TrackState.OUT_OF_FRAME:
                continue
            
            # ‚≠ê –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if track.should_be_deleted_due_to_size():
                continue
            
            active_tracks.append(track)
        
        self.tracks = active_tracks
    
    def _get_output(self, include_tentative: bool = False,
                   include_occluded: bool = False) -> List[Tuple[int, Tuple, str]]:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        result = []
        
        for track in self.tracks:
            if track.state == TrackState.TENTATIVE:
                if include_tentative:
                    self.tentative_log.append((self.frame_count, track.id))
                else:
                    continue
            
            if track.state == TrackState.OCCLUDED and not include_occluded:
                continue
            
            if track.state == TrackState.OUT_OF_FRAME:
                continue
            
            box = track.get_smoothed_box(use_prediction=(track.missed_frames > 0))
            result.append((track.id, box, track.state.value))
        
        return result
    
    def get_statistics(self) -> dict:
        """‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—Ä–∞—Ö"""
        state_counts = {}
        for state in TrackState:
            state_counts[state.value] = sum(1 for t in self.tracks if t.state == state)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤
        rejection_reasons = {}
        for entry in self.rejected_boxes_log:
            reason = entry['reason']
            rejection_reasons[reason] = rejection_reasons.get(reason, 0) + 1
        
        return {
            'total_tracks': len(self.tracks),
            'state_distribution': state_counts,
            'avg_track_age': np.mean([t.age for t in self.tracks]) if self.tracks else 0,
            'frames_processed': self.frame_count,
            'avg_detections_per_frame': self.total_detections / max(1, self.frame_count),
            'tentative_tracks_created': len(self.tentative_log),
            'rejected_boxes_total': len(self.rejected_boxes_log),
            'rejection_reasons': rejection_reasons,
            'size_thresholds': self.size_validator.get_thresholds_info()
        }
    
    def get_rejected_boxes_summary(self) -> dict:
        """‚≠ê –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–∞—Ö"""
        if not self.rejected_boxes_log:
            return {'total': 0, 'by_frame': {}, 'size_distribution': {}}
        
        by_frame = {}
        widths = []
        heights = []
        
        for entry in self.rejected_boxes_log:
            frame = entry['frame']
            by_frame[frame] = by_frame.get(frame, 0) + 1
            widths.append(entry['width'])
            heights.append(entry['height'])
        
        return {
            'total': len(self.rejected_boxes_log),
            'by_frame': by_frame,
            'size_distribution': {
                'width': {
                    'min': min(widths),
                    'max': max(widths),
                    'mean': np.mean(widths),
                    'median': np.median(widths)
                },
                'height': {
                    'min': min(heights),
                    'max': max(heights),
                    'mean': np.mean(heights),
                    'median': np.median(heights)
                }
            }
        }


# ‚≠ê –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
if __name__ == "__main__":
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 1: –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    # ============================================================
    print("=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 1: –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏")
    print("=" * 60)
    
    config_absolute = TrackConfig(
        fps=4.0,
        min_hits=2,
        max_misses=12,
        
        # ‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        min_box_width=100,   # –ú–∏–Ω–∏–º—É–º 100 –ø–∏–∫—Å–µ–ª–µ–π —à–∏—Ä–∏–Ω—ã
        min_box_height=120,  # –ú–∏–Ω–∏–º—É–º 120 –ø–∏–∫—Å–µ–ª–µ–π –≤—ã—Å–æ—Ç—ã
        
        allow_shrinking_below_threshold=True,   # –†–∞–∑—Ä–µ—à–∏—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏–µ
        delete_tracks_below_threshold=False     # –ù–µ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
    )
    
    tracker1 = ContainerTracker(1920, 1080, config_absolute)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –±–æ–∫—Å—ã
    boxes_f1 = [
        (100, 200, 300, 440),   # 200x240 - OK
        (500, 200, 580, 290),   # 80x90 - TOO SMALL (–æ—Ç–∫–ª–æ–Ω—ë–Ω)
        (700, 200, 900, 440),   # 200x240 - OK
    ]
    
    results = tracker1.update(1, boxes_f1, include_tentative=True)
    print(f"\nFrame 1: {len(results)} —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
    for track_id, box, state in results:
        print(f"  Track {track_id}: width={box[2]-box[0]:.0f}, height={box[3]-box[1]:.0f}, state={state}")
    
    print(f"\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–æ–∫—Å–æ–≤: {len(tracker1.rejected_boxes_log)}")
    for entry in tracker1.rejected_boxes_log:
        print(f"  {entry['reason']}: width={entry['width']:.0f}, height={entry['height']:.0f}")
    
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 2: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–¥—Ä–∞)
    # ============================================================
    print("\n" + "=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 2: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏")
    print("=" * 60)
    
    config_relative = TrackConfig(
        fps=4.0,
        min_hits=2,
        max_misses=12,
        
        # ‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ % –æ—Ç –∫–∞–¥—Ä–∞
        min_box_width_ratio=0.05,   # 5% —à–∏—Ä–∏–Ω—ã –∫–∞–¥—Ä–∞ = 96 –ø–∏–∫—Å –ø—Ä–∏ 1920
        min_box_height_ratio=0.08,  # 8% –≤—ã—Å–æ—Ç—ã –∫–∞–¥—Ä–∞ = 86 –ø–∏–∫—Å –ø—Ä–∏ 1080
        
        allow_shrinking_below_threshold=True,
        delete_tracks_below_threshold=False
    )
    
    tracker2 = ContainerTracker(1920, 1080, config_relative)
    
    results = tracker2.update(1, boxes_f1, include_tentative=True)
    print(f"\nFrame 1: {len(results)} —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
    print(f"–ü–æ—Ä–æ–≥–∏: width >= {tracker2.size_validator.abs_min_width:.0f}px, "
          f"height >= {tracker2.size_validator.abs_min_height:.0f}px")
    
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    # ============================================================
    print("\n" + "=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
    print("=" * 60)
    
    config_area = TrackConfig(
        fps=4.0,
        min_hits=2,
        max_misses=12,
        
        # ‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –±–æ–∫—Å–∞
        min_box_area=15000,  # 15000 –ø–∏–∫—Å–µ–ª–µ–π¬≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100x150)
        
        allow_shrinking_below_threshold=True,
        delete_tracks_below_threshold=False
    )
    
    tracker3 = ContainerTracker(1920, 1080, config_area)
    
    results = tracker3.update(1, boxes_f1, include_tentative=True)
    print(f"\nFrame 1: {len(results)} —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
    print(f"–ü–æ—Ä–æ–≥ –ø–ª–æ—â–∞–¥–∏: >= {config_area.min_box_area} px¬≤")
    
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
    # ============================================================
    print("\n" + "=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")
    print("=" * 60)
    
    config_strict = TrackConfig(
        fps=4.0,
        min_hits=2,
        max_misses=12,
        
        min_box_width=100,
        min_box_height=120,
        
        allow_shrinking_below_threshold=False,  # ‚≠ê –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏–µ
        delete_tracks_below_threshold=True      # ‚≠ê –£–¥–∞–ª—è—Ç—å –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
    )
    
    tracker4 = ContainerTracker(1920, 1080, config_strict)
    
    # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–∫ —Å –±–æ–ª—å—à–∏–º –±–æ–∫—Å–æ–º
    boxes_f1_big = [(100, 200, 300, 440)]  # 200x240
    results = tracker4.update(1, boxes_f1_big)
    print(f"\nFrame 1: {len(results)} —Ç—Ä–µ–∫–æ–≤")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–º –±–æ–∫—Å–æ–º
    boxes_f2_small = [(100, 200, 180, 310)]  # 80x110 - –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞
    results = tracker4.update(2, boxes_f2_small)
    print(f"Frame 2 (–º–∞–ª–µ–Ω—å–∫–∏–π –±–æ–∫—Å): {len(results)} —Ç—Ä–µ–∫–æ–≤ (—Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω)")
    
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 5: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    # ============================================================
    print("\n" + "=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 5: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    print("=" * 60)
    
    config_combined = TrackConfig(
        fps=4.0,
        min_hits=2,
        max_misses=12,
        
        # ‚≠ê –ò —à–∏—Ä–∏–Ω–∞, –ò –≤—ã—Å–æ—Ç–∞, –ò –ø–ª–æ—â–∞–¥—å
        min_box_width=80,
        min_box_height=100,
        min_box_area=10000,
        
        allow_shrinking_below_threshold=True,
        delete_tracks_below_threshold=False
    )
    
    tracker5 = ContainerTracker(1920, 1080, config_combined)
    
    test_boxes = [
        (100, 200, 300, 440),   # 200x240, area=48000 - OK
        (500, 200, 590, 310),   # 90x110, area=9900 - FAIL (area)
        (700, 200, 850, 290),   # 150x90, area=13500 - FAIL (height)
    ]
    
    results = tracker5.update(1, test_boxes, include_tentative=True)
    print(f"\nFrame 1: {len(results)} —Ç—Ä–µ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ {len(test_boxes)} –±–æ–∫—Å–æ–≤")
    
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = tracker5.get_statistics()
    print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–æ–∫—Å–æ–≤: {stats['rejected_boxes_total']}")
    print(f"  –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {stats['rejection_reasons']}")
    
    print("\n–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤:")
    rejected_summary = tracker5.get_rejected_boxes_summary()
    print(f"  –í—Å–µ–≥–æ: {rejected_summary['total']}")
    print(f"  –†–∞–∑–º–µ—Ä—ã (—à–∏—Ä–∏–Ω–∞): min={rejected_summary['size_distribution']['width']['min']:.0f}, "
          f"mean={rejected_summary['size_distribution']['width']['mean']:.0f}")
    
    
    # ============================================================
    # –ü—Ä–∏–º–µ—Ä 6: –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã 20ft/40ft
    # ============================================================
    print("\n" + "=" * 60)
    print("–ü—Ä–∏–º–µ—Ä 6: –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã)")
    print("=" * 60)
    
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º:
    # - –ö–∞–º–µ—Ä–∞ 1920x1080
    # - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 40ft –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10–º –∑–∞–Ω–∏–º–∞–µ—Ç ~200x240 –ø–∏–∫—Å–µ–ª–µ–π
    # - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 20ft –Ω–∞ —Ç–æ–º –∂–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ~100x240 –ø–∏–∫—Å–µ–ª–µ–π
    # - –•–æ—Ç–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–µ–ª–∫–∏–π –º—É—Å–æ—Ä (–∫–æ—Ä–æ–±–∫–∏, –ª—é–¥–∏ –∏ —Ç.–¥.)
    
    config_real = TrackConfig(
        fps=4.0,
        min_hits=3,          # 3 –ø–æ–¥—Ä—è–¥ –∫–∞–¥—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        max_misses=16,       # 4 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 4 FPS
        
        # ‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        min_box_width=80,    # –ú–∏–Ω–∏–º—É–º 80 –ø–∏–∫—Å–µ–ª–µ–π (–¥–∞–∂–µ 20ft –≤–¥–∞–ª–µ–∫–µ)
        min_box_height=100,  # –ú–∏–Ω–∏–º—É–º 100 –ø–∏–∫—Å–µ–ª–µ–π –≤—ã—Å–æ—Ç—ã
        min_box_area=10000,  # –ú–∏–Ω–∏–º—É–º 10000 px¬≤ (100x100)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ (–æ–∫–∫–ª—é–∑–∏—è, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞)
        allow_shrinking_below_threshold=True,
        
        # –ù–æ —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –¥–æ–ª–≥–æ –º–∞–ª–µ–Ω—å–∫–∏–π (—É–µ—Ö–∞–ª –≤–¥–∞–ª—å)
        delete_tracks_below_threshold=False,
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        use_kalman=True,
        motion_threshold_px=8.0,
        max_x2_deviation=0.15,
        max_cy_deviation=0.10
    )
    
    tracker_real = ContainerTracker(1920, 1080, config_real)
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    print("\n–°–∏–º—É–ª—è—Ü–∏—è 10 –∫–∞–¥—Ä–æ–≤:")
    
    frames_data = [
        # Frame 1: 2 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ + –º—É—Å–æ—Ä
        [(100, 300, 280, 540),   # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1: 180x240
         (500, 350, 650, 550),   # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2: 150x200
         (800, 400, 850, 450)],  # –ú—É—Å–æ—Ä: 50x50 - –æ—Ç–∫–ª–æ–Ω—ë–Ω
        
        # Frame 2: –¥–≤–∏–∂–µ–Ω–∏–µ
        [(120, 300, 300, 540),
         (520, 350, 670, 550)],
        
        # Frame 3: –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–∫–∫–ª—é–¥–∏—Ä–æ–≤–∞–Ω
        [(140, 300, 320, 540)],
        
        # Frame 4: –æ–±–∞ –≤–∏–¥–Ω—ã
        [(160, 300, 340, 540),
         (560, 350, 710, 550)],
        
        # Frame 5-10: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        [(180, 300, 360, 540), (580, 350, 730, 550)],
        [(200, 300, 380, 540), (600, 350, 750, 550)],
        [(220, 300, 400, 540), (620, 350, 770, 550)],
        [(240, 300, 420, 540), (640, 350, 790, 550)],
        [(260, 300, 440, 540), (660, 350, 810, 550)],
        [(280, 300, 460, 540), (680, 350, 830, 550)],
    ]
    
    for frame_id, boxes in enumerate(frames_data, start=1):
        results = tracker_real.update(frame_id, boxes, include_occluded=True)
        print(f"\n  Frame {frame_id}: {len(boxes)} –¥–µ—Ç–µ–∫—Ü–∏–π ‚Üí {len(results)} —Ç—Ä–µ–∫–æ–≤")
        for track_id, box, state in results:
            w, h = box[2] - box[0], box[3] - box[1]
            print(f"    Track {track_id}: {w:.0f}x{h:.0f}, state={state}")
    
    print("\n" + "=" * 60)
    print("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("=" * 60)
    final_stats = tracker_real.get_statistics()
    print(f"–í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {final_stats['frames_processed']}")
    print(f"–í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {tracker_real.total_detections}")
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {final_stats['total_tracks']}")
    print(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–æ–∫—Å–æ–≤: {final_stats['rejected_boxes_total']}")
    print(f"–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {final_stats['rejection_reasons']}")
    print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:")
    for state, count in final_stats['state_distribution'].items():
        if count > 0:
            print(f"  {state}: {count}")
    
    print(f"\n–ü–æ—Ä–æ–≥–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:")
    thresholds = final_stats['size_thresholds']
    print(f"  –ú–∏–Ω. —à–∏—Ä–∏–Ω–∞: {thresholds['min_width_px']} px")
    print(f"  –ú–∏–Ω. –≤—ã—Å–æ—Ç–∞: {thresholds['min_height_px']} px")
    print(f"  –ú–∏–Ω. –ø–ª–æ—â–∞–¥—å: {thresholds['min_area_px2']} px¬≤")
```

---

## üéØ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### 1. **–¢—Ä–∏ —Ç–∏–ø–∞ –ø–æ—Ä–æ–≥–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤**
```python
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ (–ø–∏–∫—Å–µ–ª–∏)
min_box_width=100
min_box_height=120

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (% –æ—Ç –∫–∞–¥—Ä–∞)
min_box_width_ratio=0.05  # 5% —à–∏—Ä–∏–Ω—ã

# –ü–æ –ø–ª–æ—â–∞–¥–∏
min_box_area=15000  # px¬≤
```

### 2. **–ì–∏–±–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ**
```python
# –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ (–æ–∫–∫–ª—é–∑–∏—è)
allow_shrinking_below_threshold=True

# –£–¥–∞–ª—è—Ç—å —Ç—Ä–µ–∫–∏ –ø—Ä–∏ —Å—Ç–æ–π–∫–æ–º —É–º–µ–Ω—å—à–µ–Ω–∏–∏
delete_tracks_below_threshold=True
```

### 3. **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
```python
stats = tracker.get_statistics()
# –í–∫–ª—é—á–∞–µ—Ç:
# - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤
# - –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
# - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤

rejected = tracker.get_rejected_boxes_summary()
# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –±–æ–∫—Å–æ–≤
```

### 4. **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏**
```python
# –í—Å–µ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –±–æ–∫—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
tracker.rejected_boxes_log
# –°–æ–¥–µ—Ä–∂–∏—Ç: frame, box, reason, width, height
```

---

## üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ

```python
# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ–ª–∫–æ–≥–æ –º—É—Å–æ—Ä–∞
config = TrackConfig(
    min_box_width=80,
    min_box_height=100,
    allow_shrinking_below_threshold=True,
    delete_tracks_below_threshold=False
)

# –î–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
config = TrackConfig(
    min_box_area=20000,  # –¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    allow_shrinking_below_threshold=False,
    delete_tracks_below_threshold=True
)

# –î–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º
config = TrackConfig(
    min_box_width_ratio=0.04,  # 4% —à–∏—Ä–∏–Ω—ã –∫–∞–¥—Ä–∞
    min_box_height_ratio=0.06  # 6% –≤—ã—Å–æ—Ç—ã –∫–∞–¥—Ä–∞
)
```
